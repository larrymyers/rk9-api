package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"larrymyers.com/rk9api/graph/generated"
	"larrymyers.com/rk9api/graph/model"
)

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	events, err := r.Client.GetEvents(ctx)
	if err != nil {
		return nil, err
	}

	var mEvents []*model.Event
	for _, event := range events {
		mEvents = append(mEvents, &model.Event{
			ID:        event.ID,
			Name:      event.Name,
			Location:  event.Location,
			StartDate: event.StartDate.String(),
			EndDate:   event.EndDate.String(),
			URL:       event.URL,
		})
	}

	return mEvents, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
